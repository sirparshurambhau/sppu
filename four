Assignment = 4 (Node.js)
Q2)On Module Create a new module file named math.js that exports two functions: add 
and subtract. Implement each function to perform addition and subtraction of two 
numbers, respectively.Create a new file named app.js and import the math module. Use 
the add and subtract functions to perform arithmetic operations and display the results in 
the console.
➔math.js =// math.js
function add(a, b) {
 return a + b;
 }
 function subtract(a, b) {
 return a - b;
 }
 module.exports = { add, subtract };
App.js = // app.js
const math = require('./math');
const num1 = 10;
const num2 = 5;
const resultAddition = math.add(num1, num2);
console.log(`Result of addition: ${resultAddition}`);
const resultSubtraction = math.subtract(num1, num2);
console.log(`Result of subtraction: ${resultSubtraction}`);
Q3) write a asynchronous function named delayedMessage that takes a callback function 
as an argument. Inside the function, use setTimeout to delay execution for 2 seconds, 
then invoke the callback function with the message "Delayed message".Call the 
delayedMessage function and provide a callback function to handle the delayed message. 
Display the received message in the console.
➔function delayedMessage(callback) {
 setTimeout(() => {
 callback("Delayed message");
 }, 2000);
 }
 function handleMessage(message) {
 console.log("Received message:", message);
 }
 delayedMessage(handleMessage);
Q4) Create an event emitter instance and define an event named greet.Implement a 
listener for the greet event that prints "Hello, Event!" to the console.Emit the greet event 
and observe the output in the console.
➔const EventEmitter = require('events');
const eventEmitter = new EventEmitter();
eventEmitter.on('greet', () => {
 console.log("Hello, Event!");
});
eventEmitter.emit('greet');
Q5) Create a readable stream to read data from a text file named data.txt. Use the fs 
module to create the stream. Implement event listeners for the data and end events of 
the stream. Display the received data and a message indicating the end of the stream in 
the console.
➔const fs = require('fs');
const readableStream = fs.createReadStream('data.txt', 'utf8');
readableStream.on('data', (chunk) => {
 console.log('Received data:', chunk);
});
readableStream.on('end', () => {
 console.log('End of stream');
});
Data.txt = Hello Hii
