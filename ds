DATA STRUCTURE
Q1. Consider following two lists:
a [1, 2, 2, 3, 5, 8, 13, 21, 34, 55, 89]
b=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
Write a python program that returns a list that contains only the elements that are common between the lists (without duplicates). 
Make sure your program works on two lists of different sizes.
=>
a = [1, 2, 2, 3, 5, 8, 13, 21, 34, 55, 89]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
set_a = set(a)
set_b = set(b)
common_elements = list(set_a.intersection(set_b))
print(common_elements)
__________________________________________________________________________________________________________________________________________________

Q2. Write a python program to create a list of 'n' integers. Find all prime numbers from the above created list and store them in a separate list.
Display both list.(Using Recursion)
=>
def generate_list(n):
    return list(range(2, n + 1))
def is_prime(num):
    return num > 1 and all(num % i != 0 for i in range(2, int(num ** 0.5) + 1))
def find_primes(numbers):
    return [num for num in numbers if is_prime(num)]
def main():
    n = int(input("Enter the value of n: "))
    integers_list = generate_list(n)
    primes_list = find_primes(integers_list)
    print("List of integers:", integers_list)
    print("List of prime numbers:", primes_list)
if __name__ == "__main__":
    main()
____________________________________________________________________________________________________________________________________________________

Q3.Write a short python program to create a list of 'n' integers and find their median.
=>
def find_median(numbers):
    sorted_numbers = sorted(numbers)
    n = len(sorted_numbers)
    return (sorted_numbers[n // 2] + sorted_numbers[-(n % 2 == 0)]) / 2
def main():
    n = int(input("Enter the value of n: "))
    integers_list = [int(input(f"Enter integer {i+1}: ")) for i in range(n)]
    median = find_median(integers_list)
    print("Median of the list:", median)
if __name__ == "__main__":
    main()
_____________________________________________________________________________________________________________________________________________________

Q4. Write a python program to to accept the strings which contain all vowels.
=>
def main():
    strings = []
    while True:
        string = input("Enter a string (or type 'done' to finish): ")
        if string.lower() == 'done':
            break
        strings.append(string)
    strings_with_all_vowels = [string for string in strings if contains_all_vowels(string)]
    print("Strings containing all vowels:")
    for string in strings_with_all_vowels:
        print(string)
if __name__ == "__main__":
    main()
______________________________________________________________________________________________________________________________________________________

Q5.a)Convert a tuple into string. Consider following tuple
t=('c', 'o', 'm', 'p', 't', ', 'e', 'r', '', 's', 'c', 'i', 'e', 'n', 'c', 'e')
Expected output: computer science
b)Find the occurrences of items in a tuple t(3, 34, 45, 3, 7, 3, 4, 5, 78, 34, 3,6,77,6)
Input: Example - find occurrences of '2' in given tuple
=>
# a)
t = ('c', 'o', 'm', 'p', 't', 'e', 'r', ' ', 's', 'c', 'i', 'e', 'n', 'c', 'e')
result_string = ''.join(t)
print(result_string)

# b)
t = (3, 34, 45, 3, 7, 3, 4, 5, 78, 34, 3, 6, 77, 6)
occurrences = t.count(3)
print("Occurrences of '3' in the tuple:", occurrences)
______________________________________________________________________________________________________________________________________________________

Q6.Write a python function to find all duplicates in the list
=>
def find_duplicates(lst):
    seen = set()
    duplicates = set()
    for item in lst:
        if item in seen:
            duplicates.add(item)
        else:
            seen.add(item)
    return list(duplicates)
# Example
my_list = [1, 2, 3, 4, 5, 2, 3, 6, 7, 8, 4]
print("Duplicates in the list:", find_duplicates(my_list))
______________________________________________________________________________________________________________________________________________________

Q7.Write a python program to create a list, find the largest of n numbers of a List. Write a function to find the largest number
=>
def find_largest(lst):
    return max(lst, default=None)

def main():
    my_list = [int(input(f"Enter element {i+1}: ")) for i in range(int(input("Enter the number of elements in the list: ")))]
    largest_number = find_largest(my_list)
    print("Largest number in the list:", largest_number) if largest_number is not None else print("List is empty.")

if __name__ == "__main__":
    main()
______________________________________________________________________________________________________________________________________________________

Q8.Write a python function to find all the unique elements of a list
=>
def find_unique(lst):
    unique_elements = []
    seen = set()
    for item in lst:
        if item not in seen:
            unique_elements.append(item)
            seen.add(item)
    return unique_elements
# Example
my_list = [1, 2, 3, 4, 2, 3, 5, 6, 7, 8, 4]
print("Unique elements of the list:", find_unique(my_list))
______________________________________________________________________________________________________________________________________________________

Q9.Write a python program to calculate a square of all elements of a list. Use map() function
=>
def square(x):
    return x ** 2
def main():
    my_list = [int(x) for x in input("Enter the elements of the list separated by spaces: ").split()]
    squared_list = list(map(square, my_list))
    print("Square of all elements of the list:", squared_list)
if __name__ == "__main__":
    main()
______________________________________________________________________________________________________________________________________________________

Q10.Take the list as an input from the user and find the ged and led
=>
def main():
    my_list = [int(x) for x in input("Enter the elements of the list separated by spaces: ").split()]
#(GED) using max()
    ged = max(my_list)
#(LED) using min()
    led = min(my_list)
    print("Greatest element (GED):", ged)
    print("Least element (LED):", led)
if __name__ == "__main__":
    main()
______________________________________________________________________________________________________________________________________________________

Q11.Write a Python module called "shape". Write methods for following options in module
"shape"
a) Calculate area of triangle
b) Calculate area of rectangle
c) Calculate area of circle
d) Calculate area of cone
Use the module "shape" in python program and test it
=>
## A)shape.py
import math

class Shape:
    @staticmethod
    def triangle(base, height):
        return 0.5 * base * height

    @staticmethod
    def rectangle(length, width):
        return length * width

    @staticmethod
    def circle(radius):
        return math.pi * radius ** 2

    @staticmethod
    def cone(radius, height):
        return (math.pi * radius ** 2 * height) / 3
 ## B)main.py
import shape

def main():
    print("Select shape to calculate area:")
    print("a) Triangle")
    print("b) Rectangle")
    print("c) Circle")
    print("d) Cone")

    choice = input("Enter your choice: ")

    if choice.lower() == 'a':
        base = float(input("Enter the base of the triangle: "))
        height = float(input("Enter the height of the triangle: "))
        area = shape.Shape.triangle(base, height)
        print("Area of triangle:", area)
    elif choice.lower() == 'b':
        length = float(input("Enter the length of the rectangle: "))
        width = float(input("Enter the width of the rectangle: "))
        area = shape.Shape.rectangle(length, width)
        print("Area of rectangle:", area)
    elif choice.lower() == 'c':
        radius = float(input("Enter the radius of the circle: "))
        area = shape.Shape.circle(radius)
        print("Area of circle:", area)
    elif choice.lower() == 'd':
        radius = float(input("Enter the radius of the cone: "))
        height = float(input("Enter the height of the cone: "))
        area = shape.Shape.cone(radius, height)
        print("Area of cone:", area)
    else:
        print("Invalid choice")

if __name__ == "__main__":
    main()
_________________________________________________________________________________________________________________________________________________
