import numpy as np
from keras.models import Sequential
from keras.layers import Dense
X_train = np.array([[0, 1, 1], [1, 0, 0], [1, 0, 1], [0, 0, 1], [1, 1, 1], [1, 0, 1], [0, 1, 1]])
y_train = np.array([1, 0, 1, 0, 1, 1, 0])
X_test = np.array([[1, 0, 0]])
model = Sequential()
model.add(Dense(10, input_dim=3, activation='relu')) # Input layer with 3 nodes and ReLU 
activation
model.add(Dense(100, activation='relu')) # Hidden layer with 100 nodes and ReLU 
activation
model.add(Dense(1, activation='sigmoid')) # Output layer with 1 node and Sigmoid 
activation
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
epochs = [10, 100, 10000]
for epoch in epochs:
 print(f"Training for {epoch} epochs:")
 model.fit(X_train, y_train, epochs=epoch, batch_size=1, verbose=0)
 loss, accuracy = model.evaluate(X_train, y_train, verbose=0)
 print(f"Accuracy after {epoch} epochs: {accuracy}")
prediction = model.predict(X_test)
print(f'Prediction for test data {X_test}: {prediction}')OA
