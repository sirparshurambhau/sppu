#Q1.Implement a JavaScript generator function to generate Fibonacci numbers up to a specified limit. Test your generator by generating the first 10 Fibonacci numbers and printing them.
-----------------------------------------------------------------------------------------------------------------------------
function* fibonacciGenerator(limit) {
    // Initialize the first two Fibonacci numbers
    let a = 0;
    let b = 1;
    
    // Initialize a counter for the number of Fibonacci numbers generated
    let count = 0;
    
    // Yield Fibonacci numbers up to the specified limit
    while (count < limit) {
        // Yield the current Fibonacci number
        yield a;
        
        // Calculate the next Fibonacci number
        let next = a + b;
        a = b;
        b = next;
        
        // Increment the counter
        count++;
    }
}

// Test the generator by generating the first 10 Fibonacci numbers
const limit = 10; // Number of Fibonacci numbers to generate

// Create an instance of the generator
const fibGenerator = fibonacciGenerator(limit);

// Iterate through the generator and print each Fibonacci number
console.log(`The first ${limit} Fibonacci numbers:`);
for (const fibNumber of fibGenerator) {
    console.log(fibNumber);
}




Q2.Write a Python program that uses the itertools module to generate all combinations of a given list of elements. Prompt the user to enter a list of elements, and then print all possible combinations of those elements.
----------------------------------------------------------------------------------------------------------------------------

from itertools import combinations

def generate_combinations(elements):
    """
    Generate and print all possible combinations of the given list of elements.
    """
    # Get the length of the elements list
    n = len(elements)
    
    # Iterate through each possible combination length (from 1 to n)
    for r in range(1, n + 1):
        print(f"Combinations of length {r}:")
        # Generate combinations of length r using itertools.combinations
        for combo in combinations(elements, r):
            print(combo)
        print()  # Print a blank line for better readability

def main():
    # Prompt the user to enter a list of elements separated by spaces
    elements_input = input("Enter a list of elements separated by spaces: ")
    
    # Split the input string into a list of elements
    elements = elements_input.split()
    
    # Generate and print all possible combinations of the elements
    generate_combinations(elements)

# Run the program
if __name__ == "__main__":
    main()




#Q4.Given a list of strings representing names, write a generator function called
`filter_names that takes a list of names and a substring as parameters and yields only
those names from the list that contain the given substring.
-------------------------------------------------------------------------------------------------

def filter_names(names, substring):
    """
    Generator function that takes a list of names and a substring as parameters
    and yields only those names from the list that contain the given substring.

    :param names: List of names (strings).
    :param substring: The substring to filter names by.
    """
    # Iterate through each name in the list
    for name in names:
        # Check if the name contains the given substring (case-insensitive)
        if substring.lower() in name.lower():
            # Yield the name if it contains the substring
            yield name

def main():
    # List of names (strings)
    names = ["Alice", "Bob", "Charlie", "David", "Eve", "Frank", "Grace"]

    # Prompt the user to enter a substring to filter names by
    substring = input("Enter a substring to filter names by: ")

    # Create a generator to filter names that contain the given substring
    filtered_names = filter_names(names, substring)

    # Print the filtered names
    print(f"Names that contain '{substring}':")
    for name in filtered_names:
        print(name)

# Run the program
if __name__ == "__main__":
    main()



#Q.Use map to create a new list by changing each number to its square in the numbers list.
--------------------------------------------------------------------------------------------
def main():
    # List of numbers
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

    # Use map to apply the square transformation to each number
    squares = list(map(lambda x: x ** 2, numbers))

    # Print the original list and the list of squares
    print(f"Original list: {numbers}")
    print(f"List of squares: {squares}")

# Run the program
if __name__ == "__main__":
    main()



#Q.Q6.Use filter to filter out countries containing six letters and more in the country list.
-----------------------------------------------------------------------------------------------
def main():
    # List of countries
    country_list = ["USA", "Canada", "Mexico", "Brazil", "Argentina", "Peru", "Chile"]

    # Use filter to filter out countries containing six letters and more
    filtered_countries = list(filter(lambda country: len(country) < 6, country_list))

    # Print the filtered list of countries
    print(f"Countries with less than 6 letters: {filtered_countries}")

# Run the program
if __name__ == "__main__":
    main()



Q7. Use filter to filter out countries starting with an 'E'.
--------------------------------------------------------------
def main():
    # List of countries
    country_list = ["USA", "Canada", "Mexico", "Ecuador", "Egypt", "Estonia", "Brazil"]

    # Use filter to filter out countries starting with an 'E'
    filtered_countries = list(filter(lambda country:country.lower().startswith('e'), country_list))

    # Print the filtered list of countries
    print(f"Countries starting with 'E': {filtered_countries}")

# Run the program
if __name__ == "__main__":
    main()



Q8. Declare a function called get_string_lists which takes a list as a parameter and then 
returns a list containing only string items.
--------------------------------------------------------------------------------------------

def get_string_lists(input_list):
    """
    Takes a list as a parameter and returns a list containing only string items.

    :param input_list: The input list containing items of different types.
    :return: A list containing only string items from the input list.
    """
    # Use list comprehension to filter only string items from the input list
    string_list = [item for item in input_list if isinstance(item, str)]
    
    return string_list

def main():
    # Example input list with different types of items
    input_list = ["hello", 42, "world", 3.14, "Python", True]

    # Call the function to get a list of only string items
    result = get_string_lists(input_list)

    # Print the resulting list of strings
    print(f"List of string items: {result}")

# Run the program
if __name__ == "__main__":
    main()



#Q9. Write a Python generator function to generate the first N Fibonacci numbers.
-----------------------------------------------------------------------------------
def generate_fibonacci(n):
    """
    Generator function to generate the first N Fibonacci numbers.

    :param n: The number of Fibonacci numbers to generate.
    :yield: Each Fibonacci number one by one.
    """
    # Initialize the first two Fibonacci numbers
    a, b = 0, 1
    
    # Generate the first N Fibonacci numbers
    for _ in range(n):
        # Yield the current Fibonacci number
        yield a
        
        # Calculate the next Fibonacci number
        a, b = b, a + b

def main():
    # Prompt the user to enter the number of Fibonacci numbers to generate
    n = int(input("Enter the number of Fibonacci numbers to generate: "))

    # Create a generator to generate the first N Fibonacci numbers
    fib_generator = generate_fibonacci(n)

    # Print the first N Fibonacci numbers
    print(f"The first {n} Fibonacci numbers:")
    for fib_number in fib_generator:
        print(fib_number)

# Run the program
if __name__ == "__main__":
    main()


