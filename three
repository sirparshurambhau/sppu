Assignment = 3 (Typescript)
Q1) Write a TypeScript program that declares a variable `name` and assigns it a string 
value. Also declare a variable `age` and assign it a number value.Finally print the values of 
name and age.
➔let name: string = "John";
let age: number = 30;
console.log("Name:", name);
console.log("Age:", age);
Q2) Write a TypeScript program that declares variables using let, const, and var. Then, 
describe how each declaration type behaves with respect to scoping and mutability.
➔let x: number = 10;
const y: number = 20;
var z: number = 30;
console.log("Initial values:");
console.log("x:", x);
console.log("y:", y);
console.log("z:", z);
x = 50;
z = 70;
console.log("Modified values:");
console.log("x:", x);
console.log("y:", y);
console.log("z:", z);
Q3) Write a TypeScript program that converts a variable of one type to another using type 
assertions and type conversion functions like parseInt().
➔let numStr: any = "123";
let num: number = parseInt(numStr); 
console.log("Parsed number:", num); 
let strLength: any = "Hello";
let length: number = (strLength as string).length;
console.log("String length:", length); 
Q4) Write a TypeScript program that defines an enumeration 'Color' with values 'Red', 
'Green', 'White' and Blue. Create a variable 'selectedColor' of type 'Color' and assign it one 
of the enumeration values.
➔enum Color {
 Red,
 Green,
 White,
 Blue
}
let selectedColor: Color = Color.Green;
console.log("Selected color:", selectedColor); 
Q5) Write a TypeScript generic function that accepts two arguments: an array of any type 
and two indices. The function should swap the elements at the specified indices and 
return the modified array.
➔function swap<T>(arr: T[], index1: number, index2: number): T[] {
 if (index1 < 0 || index1 >= arr.length || index2 < 0 || index2 >= arr.length) {
 throw new Error("Invalid index provided for swapping.");
 }
 [arr[index1], arr[index2]] = [arr[index2], arr[index1]];
 return arr;
}
const numbers: number[] = [1, 2, 3, 4];
swap(numbers, 0, 2);
console.log(numbers); 
const strings: string[] = ["apple", "banana", "cherry"];
swap(strings, 1, 2);
console.log(strings);
Q6) Write a TypeScript class called Bus with the properties make, model, and year. 
Implement a constructor that initializes these properties when a Bus object is created.
➔class Bus {
 make: string;
 model: string;
 year: number;
 constructor(make: string, model: string, year: number) {
 this.make = make;
 this.model = model;
 this.year = year;
 }
}
const myBus = new Bus("Volvo", "XC90", 2022);
console.log("Make:", myBus.make); 
console.log("Model:", myBus.model); 
console.log("Year:", myBus.year); 
Q7) Write a TypeScript class that defines a base class Car with properties like make, 
model, and year,along with a start() method that prints a starting message. Now create a 
class called Engine with the properties horsepower and fuelType. Modify the Car class to 
include an instance of the Engine class as a property. Implement a method 
printCarDetails() in the Car class that prints both car and engine detail.
➔class Engine {
 horsepower: number;
 fuelType: string;
 constructor(horsepower: number, fuelType: string) {
 this.horsepower = horsepower;
 this.fuelType = fuelType;
 }
}
class Car {
 make: string;
 model: string;
 year: number;
 engine: Engine;
 constructor(make: string, model: string, year: number, engine: Engine) {
 this.make = make;
 this.model = model;
 this.year = year;
 this.engine = engine;
 }
 start(): void {
 console.log("Starting the car...");
 }
 printCarDetails(): void {
 console.log("Car Details:");
 console.log("Make:", this.make);
 console.log("Model:", this.model);
 console.log("Year:", this.year);
 console.log("Engine Details:");
 console.log("Horsepower:", this.engine.horsepower);
 console.log("Fuel Type:", this.engine.fuelType);
 }
}
let myEngine = new Engine(300, "Petrol");
let myCar = new Car("Toyota", "Camry", 2023, myEngine);
myCar.start();
myCar.printCarDetails();
Q8) Write a TypeScript module that exports a class called Student with properties name 
and age. Import the Student class in another TypeScript file, create instances of Student, 
and display their information.
➔Q8.ts = import { Student } from "./student";
const student1 = new Student("Alice", 20);
const student2 = new Student("Bob", 22);
console.log("Student 1:", student1.name, student1.age);
console.log("Student 2:", student2.name, student2.age);
Student.ts=export class Student {
 name: string;
 age: number;
 constructor(name: string, age: number) {
 this.name = name;
 this.age = age;
 }
}
Q9) Write a TypeScript module that exports multiple functions and variables using named 
exports. Import specific named exports in a separate TypeScript file and use them.
➔Q9 = import { greet, calculateArea, PI, author } from "./MyModule";
console.log(greet("Alice")); 
console.log(calculateArea(5)); 
console.log(PI); 
console.log(author); 
mymodule = export function greet(name: string): string {
 return `Hello, ${name}!`;
 }
 export function calculateArea(radius: number): number {
 return Math.PI * radius * radius;
 }
 export const PI = Math.PI;
 export const author = "John Doe";
Q10) write a typescript module that exports a default function or class.Import the default 
export into another TypeScript file and use it to perform a task or create an 
instance.main.ts
➔mathoperation.ts = export default class MathOperations {
 add(x: number, y: number): number {
 return x + y;
 }
 subtract(x: number, y: number): number {
 return x - y;
 }
}
Math.ts =import MathOperations from './mathOperations';
const mathOps = new MathOperations();
console.log("Addition:", mathOps.add(5, 3)); 
console.log("Subtraction:", mathOps.subtract(5, 3)); 
Q14) Write a function print ShapeInfo(shape:Circle | Rectangle) that prints the area of the 
shape. Use type narrowing to determine whether the shape is a Circle or Rectangle. Use 
type guards to safely access the properties specific to each shape type.(take user input). 
➔interface Circle {
 kind: "circle";
 radius: number;
}
interface Rectangle {
 kind: "rectangle";
 width: number;
 height: number;
}
type Shape = Circle | Rectangle;
function printShapeInfo(shape: Shape): void {
 if (shape.kind === "circle") {
 const area = Math.PI * shape.radius ** 2;
 console.log("Area of the circle:", area.toFixed(2));
 } else if (shape.kind === "rectangle") {
 const area = shape.width * shape.height;
 console.log("Area of the rectangle:", area.toFixed(2));
 } else {
 console.error("Invalid shape provided.");
 }
}
const userInput = prompt("Enter shape (circle or rectangle):");
if (userInput === "circle") {
 const radiusInput = parseFloat(prompt("Enter radius:"));
 const shape: Circle = { kind: "circle", radius: radiusInput };
 printShapeInfo(shape);
} else if (userInput === "rectangle") {
 const widthInput = parseFloat(prompt("Enter width:"));
 const heightInput = parseFloat(prompt("Enter height:"));
 const shape: Rectangle = { kind: "rectangle", width: widthInput, height: heightInput };
 printShapeInfo(shape);
} else {
 console.error("Invalid input.");
}
