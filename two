Assignment = 2
Q1) Write a JavaScript program to check whether three given numbers are increasing in 
strict or in soft mode. [Note: Strict mode -> 10, 15, 31 : Soft mode -> 24, 22, 31 or 22, 22, 
31. using ES6:Define a function named number_order using arrow function syntax with 
parameters x, y and Z
➔const number_order = (x, y, z) => {
 if (x < y && y < z) {
 return "Strictly increasing";
 } else if (x <= y && y <= z) {
 return "Softly increasing";
 } else {
 return "Not increasing";
 }
};
console.log(number_order(10, 15, 31)); 
console.log(number_order(24, 22, 31)); 
console.log(number_order(22, 22, 31)); 
Q2) passing a function inside template literals using arrow function print a variable is 
greater than or less than and print true or false.
➔const compare = (a, b) => `${a} is ${a < b ? 'less than' : 'greater than'} ${b}: ${a < b}`;
console.log(compare(5, 10)); 
console.log(compare(15, 7)); 
Q3) Write a JavaScript program to determine if the current runtime environment is a 
browser. This is so that front-end modules can run on the server (Node) without errors. 
[Use Array.prototype.includes() on the typeof values of both window and document 
(globals usually only available in a browser environment unless they were explicitly 
defined), which will return true if one of them is undefined. typeof allows globals to be 
checked for existence without throwing a ReferenceError.If both of them are not 
undefined, then the current environment is assumed to be a browser.]
➔const isBrowserEnvironment = () => {
 return ![typeof window, typeof document].includes('undefined');
};
console.log(isBrowserEnvironment()); 
Q4) Write a JavaScript program to build an array, using an iterator function and an initial 
seed value.[Use a while loop and Array.prototype.push() to call the function repeatedly 
until it returns false. The iterator function accepts one argument (seed) and must always 
return an array with two elements ([value, nextSeed]) or false to terminate.]
➔const buildArray = (iterator, seed) => {
 const result = [];
 let nextSeed = seed;
 while (true) {
 const iteration = iterator(nextSeed);
 if (!iteration) break; 
 const [value, newSeed] = iteration;
 result.push(value);
 nextSeed = newSeed;
 }
 return result;
};
const iteratorFunction = (seed) => {
 if (seed <= 5) {
 return [seed * seed, seed + 1]; 
 } else {
 return false; 
 }
};
const initialSeed = 1;
const resultArray = buildArray(iteratorFunction, initialSeed);
console.log(resultArray); 
Q6) Instead of manually enumerating all 52 card values, you can create a generator 
function that computes all permutations of the different suits and numbers, yielding each 
one by one. Also show all 52 cards? ♠.
➔def generate_cards():
 suits = ['♠', '♥', '♦', '♣']
 values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
 for suit in suits:
 for value in values:
 yield value + suit
for card in generate_cards():
 print(card)
Q7) Write a JavaScript program to convert a string to snake case also in KebabCase.[Note: 
Break the string into words and combine them adding _ as a separator, using a regex. Use 
String.prototype.match() to break the string into words using an appropriate regexp. Use 
Array.prototype.map(), Array.prototype.slice(), Array.prototype.join() and 
String.prototype.toLowerCase() to combine them, adding _ as a separator.
➔function toSnakeCase(str) {
 return str.match(/[a-z]+/gi).map(word => word.toLowerCase()).join('_');
}
function toKebabCase(str) {
 return str.match(/[a-z]+/gi).map(word => word.toLowerCase()).join('-');
}
const inputString = "Convert This String To_SnakeCase!";
console.log("Snake Case:", toSnakeCase(inputString)); 
console.log("Kebab Case:", toKebabCase(inputString)); 
Q9) Write a JavaScript program that implements a function that performs a series of 
asynchronous operations in sequence using Promises and 'async/await'.
➔function asyncOperation(value) {
 return new Promise(resolve => {
 setTimeout(() => {
 console.log(`Async operation with value ${value}`);
 resolve(value);
 }, Math.random() * 1000); 
 });
}
async function seriesAsyncOperations(values) {
 const results = [];
 for (const value of values) {
 const result = await asyncOperation(value);
 results.push(result);
 }
 return results;
}
const values = [1, 2, 3, 4, 5];
(async () => {
 console.log("Starting series of asynchronous operations...");
 const results = await seriesAsyncOperations(values);
 console.log("Results:", results);
 console.log("Series of asynchronous operations completed.");
})();
Q10) write a javaScript program to perform left-to-right function composition for 
asynchronous functions.[Use Array.prototype.reduce() and the spread operator (...) to 
perform function composition using Promise.prototype.then().The functions can return a 
combination of normal values, Promises or be async, returning through await.All functions 
must accept a single argument.]
➔function composeAsync(...funcs) {
 return async function (arg) {
 return funcs.reduce(async (prevPromise, nextFunc) => {
 const result = await prevPromise;
 return nextFunc(result);
 }, Promise.resolve(arg));
 };
}
async function addOneAsync(value) {
 return value + 1;
}
async function doubleAsync(value) {
 return value * 2;
}
async function squareAsync(value) {
 return value ** 2;
}
const composedAsyncFunction = composeAsync(addOneAsync, doubleAsync, squareAsync);
composedAsyncFunction(3)
 .then(result => {
 console.log("Result:", result); 
 })
 .catch(error => {
 console.error("Error:", error);
 });
Q12) Write a JavaScript program to check whether the given argument is a symbol.[Use 
typeof to check if a value is classified as a symbol primitive.]
➔function isSymbol(value) {
 return typeof value === 'symbol';
}
const symbolValue = Symbol('foo');
const stringValue = 'bar';
console.log(isSymbol(symbolValue)); 
console.log(isSymbol(stringValue)); 
Q13) .create a web page using html and css which have div class="results" with two 
vehicle type in form which have radio button for car and truck also create button using 
onclick="processData(this.form)", create another div whose class="resultText'' and p tag 
whose id="result" using this id print a text when click on submit. In script tag we have 
three class vehicle whose child class are car and truck.This three have run() methods and 
also have function processData(form).expect output:
➔<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Vehicle Type Selection</title>
<style>
 .results {
 margin-top: 20px;
 }
 .resultText {
 margin-top: 20px;
 font-size: 18px;
 }
</style>
</head>
<body>
 <div class="results">
 <form id="vehicleForm">
 <label for="car">Car:</label>
 <input type="radio" id="car" name="vehicleType" value="car">
 <label for="truck">Truck:</label>
 <input type="radio" id="truck" name="vehicleType" value="truck">
 <button onclick="processData(this.form)">Submit</button>
 </form>
 </div>
 <div class="resultText">
 <p id="result"></p>
 </div>
 <script>
 class Vehicle {
 run() {
 return "This is a vehicle.";
 }
 }
 class Car extends Vehicle {
 run() {
 return "This is a car.";
 }
 }
 class Truck extends Vehicle {
 run() {
 return "This is a truck.";
 }
 }
 function processData(form) {
 const vehicleType = form.elements['vehicleType'].value;
 let result;
 if (vehicleType === 'car') {
 const car = new Car();
 result = car.run();
 } else if (vehicleType === 'truck') {
 const truck = new Truck();
 result = truck.run();
 } else {
 result = "Please select a vehicle type.";
 }
 document.getElementById('result').textContent = result;
 }
 </script>
</body>
</html>
Q14) write a javascript program to iterate over a callback n times.[Use 
Function.prototype.call() to call fn n times or until it returns false.Omit the last argument, 
context, to use an undefined object (or the global object in non-strict mode).]
➔function iterateCallback(n, fn) {
 for (let i = 0; i < n; i++) {
 if (fn.call() === false) {
 break;
 }
 }
}
let counter = 0;
iterateCallback(5, function() {
 console.log("Iteration", counter);
 counter++;
 if (counter >= 3) {
 return false; 
 }
});
Q15) Write a JavaScript program to split a multiline string into an array of lines.[Use 
String.prototype.split() and a regular expression to match line breaks and create an array.]
➔function splitIntoLines(multilineString) {
 return multilineString.split(/\r?\n/);
}
const multilineString = `This is the first line
This is the second line
And this is the third line`;
const linesArray = splitIntoLines(multilineString);
console.log(linesArray);
Q16) Write a JavaScript program that takes a function as an argument, then makes the 
first argument the last.[Use argument destructuring and a closure with variadic 
arguments.Splice the first argument, using the spread operator (...), to make it the last 
before applying the rest.]
➔function makeFirstArgLast(fn) {
 return function(...args) {
 const [first, ...rest] = args;
 return fn(...rest, first);
 };
}
function exampleFunction(a, b, c) {
 return `First argument: ${a}, Second argument: ${b}, Third argument: ${c}`;
}
const modifiedFunction = makeFirstArgLast(exampleFunction);
console.log(modifiedFunction(1, 2, 3)); 
Q17) Write a JavaScript program that creates a class called "BankAccount" with properties 
for account number and balance.Include methods to deposit and withdraw money from 
the account. Create some instances of the "BankAccount" class, deposit some money, and 
withdraw a portion of it.
➔class BankAccount {
 constructor(accountNumber, initialBalance) {
 this.accountNumber = accountNumber;
 this.balance = initialBalance;
 }
 deposit(amount) {
 this.balance += amount;
 console.log(`Deposited ${amount} into account ${this.accountNumber}. New balance: 
${this.balance}`);
 }
 withdraw(amount) {
 if (amount > this.balance) {
 console.log("Insufficient funds!");
 } else {
 this.balance -= amount;
 console.log(`Withdrawn ${amount} from account ${this.accountNumber}. New 
balance: ${this.balance}`);
 }
 }
}
const account1 = new BankAccount('123456789', 1000);
account1.deposit(500);
account1.withdraw(200);
const account2 = new BankAccount('987654321', 2000);
account2.deposit(1000);
account2.withdraw(300);
Q18) create a module with the name main.js and create/define a three functions 
getPower(), capitalize(), roundToDecimalPlace() and export two function 
{capitalize,roundToDecimalPlace} and import it from main.js in displayTotal.js and here 
create displayTotal() function and export it in displayTotal.js file
➔Main.js = // Function to calculate power
function getPower(base, exponent) {
 return Math.pow(base, exponent);
}
function capitalize(str) {
 return str.charAt(0).toUpperCase() + str.slice(1);
}
function roundToDecimalPlace(num, decimalPlaces) {
 return Number(num.toFixed(decimalPlaces));
}
export { capitalize, roundToDecimalPlace };
Total.js = import { capitalize, roundToDecimalPlace } from './main.js';
function displayTotal(total) {
 console.log("Total: $" + roundToDecimalPlace(total, 2)); // Rounding to 2 decimal places
}
export { displayTotal};
